{"version":3,"sources":["../node_modules/@soil/dom/src/addChildren.ts","../node_modules/@soil/dom/src/isObject.ts","../node_modules/@soil/dom/src/assignProperties.ts","../node_modules/@soil/dom/src/html/h.ts","../node_modules/@soil/dom/src/svg/s.ts","../node_modules/@soil/dom/src/index.ts","common/clone.ts","common/get.ts","common/header.ts","label-builder.ts"],"names":[],"mappings":"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","file":"label-builder.3037119e.map","sourceRoot":"../../../client/src","sourcesContent":["/**\n * Add children to the given element.\n */\nexport function addChildren(elem: Element, children: (Element | string)[]): void {\n    children.forEach(child =>\n        elem.appendChild(typeof child === 'string'\n            ? document.createTextNode(child)\n            : child)\n    )\n}\n","/**\n * Determines whether a given argument is a plain JavaScript object.\n */\nexport function isObject(o: any): boolean {\n    return o instanceof Object && (o as Object).constructor === Object\n}\n","import {isObject} from './isObject'\n\n/**\n * Assign properties from an object literal to an object of type `HTMLElement`\n * or `SVGElement`.\n */\nexport function assignProperties<E extends {[p: string]: any}, P extends {[p: string]: any}>(elem: E, props: P): void {\n    for (const p in props) {\n        if (props.hasOwnProperty(p)) {\n            if (p === 'role' || p.startsWith('aria-')) {\n                elem.setAttribute(p, props[p])\n            } else if (isObject(props[p])) {\n                // Go deeper for properties such as `style` or SVG-specific properties.\n                assignNestedProperties(elem[p], props[p])\n            } else {\n                elem[p] = props[p]\n            }\n        }\n    }\n}\n\nfunction assignNestedProperties<E extends {[p: string]: any}, P extends {[p: string]: any}>(elem: E, props: P): void {\n    for (const p in props) {\n        if (props.hasOwnProperty(p)) {\n            if (isObject(props[p])) {\n                if (!elem[p]) {\n                    elem[p] = {}\n                }\n                assignNestedProperties(elem[p], props[p])\n            } else {\n                elem[p] = props[p]\n            }\n        }\n    }\n}\n","import {addChildren} from '../addChildren'\nimport {assignProperties} from '../assignProperties'\nimport {BuiltTimeDom} from '../BuiltTimeDom'\nimport {BuiltTimeHtmlTypesMap} from './BuiltTimeHtmlTypesMap'\nimport {HtmlTypesMap} from './HtmlTypesMap'\nimport {HtmlChildrenMap} from './HtmlChildrenMap'\n\n/**\n * Factory function for HTML elements.\n */\nfunction hh<T extends keyof HtmlTypesMap>(tag: T, props?: BuiltTimeHtmlTypesMap[T], children?: HtmlChildrenMap[T]): HtmlTypesMap[T]\nfunction hh(tag: string, props?: BuiltTimeDom.HTMLElement, children?: (HTMLElement | SVGSVGElement | string)[]): HTMLElement\nfunction hh(tag: string, props?: BuiltTimeDom.HTMLElement, children?: (HTMLElement | SVGSVGElement | string)[]) {\n    const elem = document.createElement(tag)\n    if (props !== undefined) {\n        assignProperties(elem, props)\n    }\n    if (children !== undefined) {\n        addChildren(elem, children)\n    }\n    return elem\n}\n\nexport namespace h {\n\n    /**\n     * Helper function to concisely create instances of custom HTML elements,\n     * whose tags are automatically prefixed with \"x-\".\n     */\n    export const x = (tag: string, props?: BuiltTimeDom.HTMLElement, children?: (HTMLElement | SVGSVGElement | string)[]): HTMLElement => hh(`x-${tag}`, props, children)\n}\n\n/// Script-generated.\n\n/**\n * Helpers to facilitate the concise creation of any HTML element.\n *\n * NOTE The following functions silently depend on the `document` variable\n * being globally available. Therefore, unit tests of components that use them\n * must be run inside a browser, or must expose `document` globally, e.g.\n * through PhantomJS or jsdom.\n */\nexport namespace h {\n    export const a = (props?: BuiltTimeDom.HTMLAnchorElement, children?: HtmlChildrenMap['a']): HtmlTypesMap['a'] => hh('a', props, children)\n    export const abbr = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['abbr']): HtmlTypesMap['abbr'] => hh('abbr', props, children)\n    export const address = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['address']): HtmlTypesMap['address'] => hh('address', props, children)\n    export const area = (props?: BuiltTimeDom.HTMLAreaElement): HtmlTypesMap['area'] => hh('area', props)\n    export const article = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['article']): HtmlTypesMap['article'] => hh('article', props, children)\n    export const aside = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['aside']): HtmlTypesMap['aside'] => hh('aside', props, children)\n    export const audio = (props?: BuiltTimeDom.HTMLAudioElement, children?: HtmlChildrenMap['audio']): HtmlTypesMap['audio'] => hh('audio', props, children)\n    export const b = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['b']): HtmlTypesMap['b'] => hh('b', props, children)\n    export const base = (props?: BuiltTimeDom.HTMLBaseElement): HtmlTypesMap['base'] => hh('base', props)\n    export const bdi = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['bdi']): HtmlTypesMap['bdi'] => hh('bdi', props, children)\n    export const bdo = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['bdo']): HtmlTypesMap['bdo'] => hh('bdo', props, children)\n    export const blockquote = (props?: BuiltTimeDom.HTMLQuoteElement, children?: HtmlChildrenMap['blockquote']): HtmlTypesMap['blockquote'] => hh('blockquote', props, children)\n    export const body = (props?: BuiltTimeDom.HTMLBodyElement, children?: HtmlChildrenMap['body']): HtmlTypesMap['body'] => hh('body', props, children)\n    export const br = (props?: BuiltTimeDom.HTMLBRElement): HtmlTypesMap['br'] => hh('br', props)\n    export const button = (props?: BuiltTimeDom.HTMLButtonElement, children?: HtmlChildrenMap['button']): HtmlTypesMap['button'] => hh('button', props, children)\n    export const canvas = (props?: BuiltTimeDom.HTMLCanvasElement, children?: HtmlChildrenMap['canvas']): HtmlTypesMap['canvas'] => hh('canvas', props, children)\n    export const caption = (props?: BuiltTimeDom.HTMLTableCaptionElement, children?: HtmlChildrenMap['caption']): HtmlTypesMap['caption'] => hh('caption', props, children)\n    export const cite = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['cite']): HtmlTypesMap['cite'] => hh('cite', props, children)\n    export const code = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['code']): HtmlTypesMap['code'] => hh('code', props, children)\n    export const col = (props?: BuiltTimeDom.HTMLTableColElement): HtmlTypesMap['col'] => hh('col', props)\n    export const colgroup = (props?: BuiltTimeDom.HTMLTableColElement, children?: HtmlChildrenMap['colgroup']): HtmlTypesMap['colgroup'] => hh('colgroup', props, children)\n    export const data = (props?: BuiltTimeDom.HTMLDataElement, children?: HtmlChildrenMap['data']): HtmlTypesMap['data'] => hh('data', props, children)\n    export const datalist = (props?: BuiltTimeDom.HTMLDataListElement, children?: HtmlChildrenMap['datalist']): HtmlTypesMap['datalist'] => hh('datalist', props, children)\n    export const dd = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['dd']): HtmlTypesMap['dd'] => hh('dd', props, children)\n    export const del = (props?: BuiltTimeDom.HTMLModElement, children?: HtmlChildrenMap['del']): HtmlTypesMap['del'] => hh('del', props, children)\n    export const details = (props?: BuiltTimeDom.HTMLDetailsElement, children?: HtmlChildrenMap['details']): HtmlTypesMap['details'] => hh('details', props, children)\n    export const dfn = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['dfn']): HtmlTypesMap['dfn'] => hh('dfn', props, children)\n    export const dialog = (props?: BuiltTimeDom.HTMLDialogElement, children?: HtmlChildrenMap['dialog']): HtmlTypesMap['dialog'] => hh('dialog', props, children)\n    export const div = (props?: BuiltTimeDom.HTMLDivElement, children?: HtmlChildrenMap['div']): HtmlTypesMap['div'] => hh('div', props, children)\n    export const dl = (props?: BuiltTimeDom.HTMLDListElement, children?: HtmlChildrenMap['dl']): HtmlTypesMap['dl'] => hh('dl', props, children)\n    export const dt = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['dt']): HtmlTypesMap['dt'] => hh('dt', props, children)\n    export const em = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['em']): HtmlTypesMap['em'] => hh('em', props, children)\n    export const embed = (props?: BuiltTimeDom.HTMLEmbedElement): HtmlTypesMap['embed'] => hh('embed', props)\n    export const fieldset = (props?: BuiltTimeDom.HTMLFieldSetElement, children?: HtmlChildrenMap['fieldset']): HtmlTypesMap['fieldset'] => hh('fieldset', props, children)\n    export const figcaption = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['figcaption']): HtmlTypesMap['figcaption'] => hh('figcaption', props, children)\n    export const figure = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['figure']): HtmlTypesMap['figure'] => hh('figure', props, children)\n    export const footer = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['footer']): HtmlTypesMap['footer'] => hh('footer', props, children)\n    export const form = (props?: BuiltTimeDom.HTMLFormElement, children?: HtmlChildrenMap['form']): HtmlTypesMap['form'] => hh('form', props, children)\n    export const h1 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h1']): HtmlTypesMap['h1'] => hh('h1', props, children)\n    export const h2 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h2']): HtmlTypesMap['h2'] => hh('h2', props, children)\n    export const h3 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h3']): HtmlTypesMap['h3'] => hh('h3', props, children)\n    export const h4 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h4']): HtmlTypesMap['h4'] => hh('h4', props, children)\n    export const h5 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h5']): HtmlTypesMap['h5'] => hh('h5', props, children)\n    export const h6 = (props?: BuiltTimeDom.HTMLHeadingElement, children?: HtmlChildrenMap['h6']): HtmlTypesMap['h6'] => hh('h6', props, children)\n    export const head = (props?: BuiltTimeDom.HTMLHeadElement, children?: HtmlChildrenMap['head']): HtmlTypesMap['head'] => hh('head', props, children)\n    export const header = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['header']): HtmlTypesMap['header'] => hh('header', props, children)\n    export const hr = (props?: BuiltTimeDom.HTMLHRElement): HtmlTypesMap['hr'] => hh('hr', props)\n    export const html = (props?: BuiltTimeDom.HTMLHtmlElement, children?: HtmlChildrenMap['html']): HtmlTypesMap['html'] => hh('html', props, children)\n    export const i = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['i']): HtmlTypesMap['i'] => hh('i', props, children)\n    export const iframe = (props?: BuiltTimeDom.HTMLIFrameElement, children?: HtmlChildrenMap['iframe']): HtmlTypesMap['iframe'] => hh('iframe', props, children)\n    export const img = (props?: BuiltTimeDom.HTMLImageElement): HtmlTypesMap['img'] => hh('img', props)\n    export const input = (props?: BuiltTimeDom.HTMLInputElement): HtmlTypesMap['input'] => hh('input', props)\n    export const ins = (props?: BuiltTimeDom.HTMLModElement, children?: HtmlChildrenMap['ins']): HtmlTypesMap['ins'] => hh('ins', props, children)\n    export const kbd = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['kbd']): HtmlTypesMap['kbd'] => hh('kbd', props, children)\n    export const label = (props?: BuiltTimeDom.HTMLLabelElement, children?: HtmlChildrenMap['label']): HtmlTypesMap['label'] => hh('label', props, children)\n    export const legend = (props?: BuiltTimeDom.HTMLLegendElement, children?: HtmlChildrenMap['legend']): HtmlTypesMap['legend'] => hh('legend', props, children)\n    export const li = (props?: BuiltTimeDom.HTMLLIElement, children?: HtmlChildrenMap['li']): HtmlTypesMap['li'] => hh('li', props, children)\n    export const link = (props?: BuiltTimeDom.HTMLLinkElement): HtmlTypesMap['link'] => hh('link', props)\n    export const main = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['main']): HtmlTypesMap['main'] => hh('main', props, children)\n    export const map = (props?: BuiltTimeDom.HTMLMapElement, children?: HtmlChildrenMap['map']): HtmlTypesMap['map'] => hh('map', props, children)\n    export const mark = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['mark']): HtmlTypesMap['mark'] => hh('mark', props, children)\n    export const meta = (props?: BuiltTimeDom.HTMLMetaElement): HtmlTypesMap['meta'] => hh('meta', props)\n    export const meter = (props?: BuiltTimeDom.HTMLMeterElement, children?: HtmlChildrenMap['meter']): HtmlTypesMap['meter'] => hh('meter', props, children)\n    export const nav = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['nav']): HtmlTypesMap['nav'] => hh('nav', props, children)\n    export const noscript = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['noscript']): HtmlTypesMap['noscript'] => hh('noscript', props, children)\n    export const object = (props?: BuiltTimeDom.HTMLObjectElement, children?: HtmlChildrenMap['object']): HtmlTypesMap['object'] => hh('object', props, children)\n    export const ol = (props?: BuiltTimeDom.HTMLOListElement, children?: HtmlChildrenMap['ol']): HtmlTypesMap['ol'] => hh('ol', props, children)\n    export const optgroup = (props?: BuiltTimeDom.HTMLOptGroupElement, children?: HtmlChildrenMap['optgroup']): HtmlTypesMap['optgroup'] => hh('optgroup', props, children)\n    export const option = (props?: BuiltTimeDom.HTMLOptionElement, children?: HtmlChildrenMap['option']): HtmlTypesMap['option'] => hh('option', props, children)\n    export const output = (props?: BuiltTimeDom.HTMLOutputElement, children?: HtmlChildrenMap['output']): HtmlTypesMap['output'] => hh('output', props, children)\n    export const p = (props?: BuiltTimeDom.HTMLParagraphElement, children?: HtmlChildrenMap['p']): HtmlTypesMap['p'] => hh('p', props, children)\n    export const param = (props?: BuiltTimeDom.HTMLParamElement): HtmlTypesMap['param'] => hh('param', props)\n    export const picture = (props?: BuiltTimeDom.HTMLPictureElement, children?: HtmlChildrenMap['picture']): HtmlTypesMap['picture'] => hh('picture', props, children)\n    export const pre = (props?: BuiltTimeDom.HTMLPreElement, children?: HtmlChildrenMap['pre']): HtmlTypesMap['pre'] => hh('pre', props, children)\n    export const progress = (props?: BuiltTimeDom.HTMLProgressElement, children?: HtmlChildrenMap['progress']): HtmlTypesMap['progress'] => hh('progress', props, children)\n    export const q = (props?: BuiltTimeDom.HTMLQuoteElement, children?: HtmlChildrenMap['q']): HtmlTypesMap['q'] => hh('q', props, children)\n    export const rb = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['rb']): HtmlTypesMap['rb'] => hh('rb', props, children)\n    export const rp = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['rp']): HtmlTypesMap['rp'] => hh('rp', props, children)\n    export const rt = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['rt']): HtmlTypesMap['rt'] => hh('rt', props, children)\n    export const rtc = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['rtc']): HtmlTypesMap['rtc'] => hh('rtc', props, children)\n    export const ruby = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['ruby']): HtmlTypesMap['ruby'] => hh('ruby', props, children)\n    export const s = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['s']): HtmlTypesMap['s'] => hh('s', props, children)\n    export const samp = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['samp']): HtmlTypesMap['samp'] => hh('samp', props, children)\n    export const script = (props?: BuiltTimeDom.HTMLScriptElement, children?: HtmlChildrenMap['script']): HtmlTypesMap['script'] => hh('script', props, children)\n    export const section = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['section']): HtmlTypesMap['section'] => hh('section', props, children)\n    export const select = (props?: BuiltTimeDom.HTMLSelectElement, children?: HtmlChildrenMap['select']): HtmlTypesMap['select'] => hh('select', props, children)\n    export const small = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['small']): HtmlTypesMap['small'] => hh('small', props, children)\n    export const source = (props?: BuiltTimeDom.HTMLSourceElement): HtmlTypesMap['source'] => hh('source', props)\n    export const span = (props?: BuiltTimeDom.HTMLSpanElement, children?: HtmlChildrenMap['span']): HtmlTypesMap['span'] => hh('span', props, children)\n    export const strong = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['strong']): HtmlTypesMap['strong'] => hh('strong', props, children)\n    export const style = (props?: BuiltTimeDom.HTMLStyleElement, children?: HtmlChildrenMap['style']): HtmlTypesMap['style'] => hh('style', props, children)\n    export const sub = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['sub']): HtmlTypesMap['sub'] => hh('sub', props, children)\n    export const summary = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['summary']): HtmlTypesMap['summary'] => hh('summary', props, children)\n    export const sup = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['sup']): HtmlTypesMap['sup'] => hh('sup', props, children)\n    export const table = (props?: BuiltTimeDom.HTMLTableElement, children?: HtmlChildrenMap['table']): HtmlTypesMap['table'] => hh('table', props, children)\n    export const tbody = (props?: BuiltTimeDom.HTMLTableSectionElement, children?: HtmlChildrenMap['tbody']): HtmlTypesMap['tbody'] => hh('tbody', props, children)\n    export const td = (props?: BuiltTimeDom.HTMLTableDataCellElement, children?: HtmlChildrenMap['td']): HtmlTypesMap['td'] => hh('td', props, children)\n    export const template = (props?: BuiltTimeDom.HTMLTemplateElement, children?: HtmlChildrenMap['template']): HtmlTypesMap['template'] => hh('template', props, children)\n    export const textarea = (props?: BuiltTimeDom.HTMLTextAreaElement, children?: HtmlChildrenMap['textarea']): HtmlTypesMap['textarea'] => hh('textarea', props, children)\n    export const tfoot = (props?: BuiltTimeDom.HTMLTableSectionElement, children?: HtmlChildrenMap['tfoot']): HtmlTypesMap['tfoot'] => hh('tfoot', props, children)\n    export const th = (props?: BuiltTimeDom.HTMLTableHeaderCellElement, children?: HtmlChildrenMap['th']): HtmlTypesMap['th'] => hh('th', props, children)\n    export const thead = (props?: BuiltTimeDom.HTMLTableSectionElement, children?: HtmlChildrenMap['thead']): HtmlTypesMap['thead'] => hh('thead', props, children)\n    export const time = (props?: BuiltTimeDom.HTMLTimeElement, children?: HtmlChildrenMap['time']): HtmlTypesMap['time'] => hh('time', props, children)\n    export const title = (props?: BuiltTimeDom.HTMLTitleElement, children?: HtmlChildrenMap['title']): HtmlTypesMap['title'] => hh('title', props, children)\n    export const tr = (props?: BuiltTimeDom.HTMLTableRowElement, children?: HtmlChildrenMap['tr']): HtmlTypesMap['tr'] => hh('tr', props, children)\n    export const track = (props?: BuiltTimeDom.HTMLTrackElement): HtmlTypesMap['track'] => hh('track', props)\n    export const u = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['u']): HtmlTypesMap['u'] => hh('u', props, children)\n    export const ul = (props?: BuiltTimeDom.HTMLUListElement, children?: HtmlChildrenMap['ul']): HtmlTypesMap['ul'] => hh('ul', props, children)\n    export const var_ = (props?: BuiltTimeDom.HTMLElement, children?: HtmlChildrenMap['var']): HtmlTypesMap['var'] => hh('var', props, children)\n    export const video = (props?: BuiltTimeDom.HTMLVideoElement, children?: HtmlChildrenMap['video']): HtmlTypesMap['video'] => hh('video', props, children)\n    export const wbr = (props?: BuiltTimeDom.HTMLElement): HtmlTypesMap['wbr'] => hh('wbr', props)\n}\n\n/// Script-generated.\n\n/**\n * Nice-to-remember aliases for all HTML element interfaces.\n */\nexport namespace h {\n    export type A = HTMLAnchorElement\n    export type Abbr = HTMLElement\n    export type Address = HTMLElement\n    export type Area = HTMLAreaElement\n    export type Article = HTMLElement\n    export type Aside = HTMLElement\n    export type Audio = HTMLAudioElement\n    export type B = HTMLElement\n    export type Base = HTMLBaseElement\n    export type Bdi = HTMLElement\n    export type Bdo = HTMLElement\n    export type Blockquote = HTMLQuoteElement\n    export type Body = HTMLBodyElement\n    export type Br = HTMLBRElement\n    export type Button = HTMLButtonElement\n    export type Canvas = HTMLCanvasElement\n    export type Caption = HTMLTableCaptionElement\n    export type Cite = HTMLElement\n    export type Code = HTMLElement\n    export type Col = HTMLTableColElement\n    export type Colgroup = HTMLTableColElement\n    export type Data = HTMLDataElement\n    export type Datalist = HTMLDataListElement\n    export type Dd = HTMLElement\n    export type Del = HTMLModElement\n    export type Details = HTMLDetailsElement\n    export type Dfn = HTMLElement\n    export type Dialog = HTMLDialogElement\n    export type Div = HTMLDivElement\n    export type Dl = HTMLDListElement\n    export type Dt = HTMLElement\n    export type Em = HTMLElement\n    export type Embed = HTMLEmbedElement\n    export type Fieldset = HTMLFieldSetElement\n    export type Figcaption = HTMLElement\n    export type Figure = HTMLElement\n    export type Footer = HTMLElement\n    export type Form = HTMLFormElement\n    export type H1 = HTMLHeadingElement\n    export type H2 = HTMLHeadingElement\n    export type H3 = HTMLHeadingElement\n    export type H4 = HTMLHeadingElement\n    export type H5 = HTMLHeadingElement\n    export type H6 = HTMLHeadingElement\n    export type Head = HTMLHeadElement\n    export type Header = HTMLElement\n    export type Hr = HTMLHRElement\n    export type Html = HTMLHtmlElement\n    export type I = HTMLElement\n    export type Iframe = HTMLIFrameElement\n    export type Img = HTMLImageElement\n    export type Input = HTMLInputElement\n    export type Ins = HTMLModElement\n    export type Kbd = HTMLElement\n    export type Label = HTMLLabelElement\n    export type Legend = HTMLLegendElement\n    export type Li = HTMLLIElement\n    export type Link = HTMLLinkElement\n    export type Main = HTMLElement\n    export type Map = HTMLMapElement\n    export type Mark = HTMLElement\n    export type Meta = HTMLMetaElement\n    export type Meter = HTMLMeterElement\n    export type Nav = HTMLElement\n    export type Noscript = HTMLElement\n    export type Object = HTMLObjectElement\n    export type Ol = HTMLOListElement\n    export type Optgroup = HTMLOptGroupElement\n    export type Option = HTMLOptionElement\n    export type Output = HTMLOutputElement\n    export type P = HTMLParagraphElement\n    export type Param = HTMLParamElement\n    export type Picture = HTMLPictureElement\n    export type Pre = HTMLPreElement\n    export type Progress = HTMLProgressElement\n    export type Q = HTMLQuoteElement\n    export type Rb = HTMLElement\n    export type Rp = HTMLElement\n    export type Rt = HTMLElement\n    export type Rtc = HTMLElement\n    export type Ruby = HTMLElement\n    export type S = HTMLElement\n    export type Samp = HTMLElement\n    export type Script = HTMLScriptElement\n    export type Section = HTMLElement\n    export type Select = HTMLSelectElement\n    export type Small = HTMLElement\n    export type Source = HTMLSourceElement\n    export type Span = HTMLSpanElement\n    export type Strong = HTMLElement\n    export type Style = HTMLStyleElement\n    export type Sub = HTMLElement\n    export type Summary = HTMLElement\n    export type Sup = HTMLElement\n    export type Table = HTMLTableElement\n    export type Tbody = HTMLTableSectionElement\n    export type Td = HTMLTableDataCellElement\n    export type Template = HTMLTemplateElement\n    export type Textarea = HTMLTextAreaElement\n    export type Tfoot = HTMLTableSectionElement\n    export type Th = HTMLTableHeaderCellElement\n    export type Thead = HTMLTableSectionElement\n    export type Time = HTMLTimeElement\n    export type Title = HTMLTitleElement\n    export type Tr = HTMLTableRowElement\n    export type Track = HTMLTrackElement\n    export type U = HTMLElement\n    export type Ul = HTMLUListElement\n    export type Var = HTMLElement\n    export type Video = HTMLVideoElement\n    export type Wbr = HTMLElement\n}\n","import {addChildren} from '../addChildren'\nimport {assignProperties} from '../assignProperties'\nimport {BuiltTimeDom} from '../BuiltTimeDom'\nimport {BuiltTimeSvgTypesMap} from './BuiltTimeSvgTypesMap'\nimport {SvgTypesMap} from './SvgTypesMap'\n\n/**\n * Factory function for SVG elements.\n */\nfunction ss<T extends keyof SvgTypesMap>(tag: T, props?: BuiltTimeSvgTypesMap[T], children?: (Element | string)[]): SvgTypesMap[T]\nfunction ss(tag: string, props?: BuiltTimeDom.SVGElement, children?: (Element | string)[]): SVGElement\nfunction ss(tag: string, props?: BuiltTimeDom.SVGElement, children?: (Element | string)[]) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag)\n    if (props !== undefined) {\n        assignProperties(elem, props)\n    }\n    if (children !== undefined) {\n        addChildren(elem, children)\n    }\n    return elem\n}\n\n/// Script-generated.\n\n/**\n * Helpers to facilitate the concise creation of any SVG element.\n *\n * NOTE The following functions silently depend on the `document` variable\n * being globally available. Therefore, unit tests of components that use them\n * must be run inside a browser, or must expose `document` globally, e.g.\n * through PhantomJS or jsdom.\n */\nexport namespace s {\n    export const a = (props?: BuiltTimeDom.SVGAElement, children?: (SVGElement | string)[]): SvgTypesMap['a'] => ss('a', props, children)\n    export const circle = (props?: BuiltTimeDom.SVGCircleElement, children?: (SVGElement | string)[]): SvgTypesMap['circle'] => ss('circle', props, children)\n    export const clipPath = (props?: BuiltTimeDom.SVGClipPathElement, children?: (SVGElement | string)[]): SvgTypesMap['clipPath'] => ss('clipPath', props, children)\n    export const defs = (props?: BuiltTimeDom.SVGDefsElement, children?: (SVGElement | string)[]): SvgTypesMap['defs'] => ss('defs', props, children)\n    export const desc = (props?: BuiltTimeDom.SVGDescElement, children?: (SVGElement | string)[]): SvgTypesMap['desc'] => ss('desc', props, children)\n    export const ellipse = (props?: BuiltTimeDom.SVGEllipseElement, children?: (SVGElement | string)[]): SvgTypesMap['ellipse'] => ss('ellipse', props, children)\n    export const feBlend = (props?: BuiltTimeDom.SVGFEBlendElement, children?: (SVGElement | string)[]): SvgTypesMap['feBlend'] => ss('feBlend', props, children)\n    export const feColorMatrix = (props?: BuiltTimeDom.SVGFEColorMatrixElement, children?: (SVGElement | string)[]): SvgTypesMap['feColorMatrix'] => ss('feColorMatrix', props, children)\n    export const feComponentTransfer = (props?: BuiltTimeDom.SVGFEComponentTransferElement, children?: (SVGElement | string)[]): SvgTypesMap['feComponentTransfer'] => ss('feComponentTransfer', props, children)\n    export const feComposite = (props?: BuiltTimeDom.SVGFECompositeElement, children?: (SVGElement | string)[]): SvgTypesMap['feComposite'] => ss('feComposite', props, children)\n    export const feConvolveMatrix = (props?: BuiltTimeDom.SVGFEConvolveMatrixElement, children?: (SVGElement | string)[]): SvgTypesMap['feConvolveMatrix'] => ss('feConvolveMatrix', props, children)\n    export const feDiffuseLighting = (props?: BuiltTimeDom.SVGFEDiffuseLightingElement, children?: (SVGElement | string)[]): SvgTypesMap['feDiffuseLighting'] => ss('feDiffuseLighting', props, children)\n    export const feDisplacementMap = (props?: BuiltTimeDom.SVGFEDisplacementMapElement, children?: (SVGElement | string)[]): SvgTypesMap['feDisplacementMap'] => ss('feDisplacementMap', props, children)\n    export const feDistantLight = (props?: BuiltTimeDom.SVGFEDistantLightElement, children?: (SVGElement | string)[]): SvgTypesMap['feDistantLight'] => ss('feDistantLight', props, children)\n    export const feFlood = (props?: BuiltTimeDom.SVGFEFloodElement, children?: (SVGElement | string)[]): SvgTypesMap['feFlood'] => ss('feFlood', props, children)\n    export const feFuncA = (props?: BuiltTimeDom.SVGFEFuncAElement, children?: (SVGElement | string)[]): SvgTypesMap['feFuncA'] => ss('feFuncA', props, children)\n    export const feFuncB = (props?: BuiltTimeDom.SVGFEFuncBElement, children?: (SVGElement | string)[]): SvgTypesMap['feFuncB'] => ss('feFuncB', props, children)\n    export const feFuncG = (props?: BuiltTimeDom.SVGFEFuncGElement, children?: (SVGElement | string)[]): SvgTypesMap['feFuncG'] => ss('feFuncG', props, children)\n    export const feFuncR = (props?: BuiltTimeDom.SVGFEFuncRElement, children?: (SVGElement | string)[]): SvgTypesMap['feFuncR'] => ss('feFuncR', props, children)\n    export const feGaussianBlur = (props?: BuiltTimeDom.SVGFEGaussianBlurElement, children?: (SVGElement | string)[]): SvgTypesMap['feGaussianBlur'] => ss('feGaussianBlur', props, children)\n    export const feImage = (props?: BuiltTimeDom.SVGFEImageElement, children?: (SVGElement | string)[]): SvgTypesMap['feImage'] => ss('feImage', props, children)\n    export const feMerge = (props?: BuiltTimeDom.SVGFEMergeElement, children?: (SVGElement | string)[]): SvgTypesMap['feMerge'] => ss('feMerge', props, children)\n    export const feMergeNode = (props?: BuiltTimeDom.SVGFEMergeNodeElement, children?: (SVGElement | string)[]): SvgTypesMap['feMergeNode'] => ss('feMergeNode', props, children)\n    export const feMorphology = (props?: BuiltTimeDom.SVGFEMorphologyElement, children?: (SVGElement | string)[]): SvgTypesMap['feMorphology'] => ss('feMorphology', props, children)\n    export const feOffset = (props?: BuiltTimeDom.SVGFEOffsetElement, children?: (SVGElement | string)[]): SvgTypesMap['feOffset'] => ss('feOffset', props, children)\n    export const fePointLight = (props?: BuiltTimeDom.SVGFEPointLightElement, children?: (SVGElement | string)[]): SvgTypesMap['fePointLight'] => ss('fePointLight', props, children)\n    export const feSpecularLighting = (props?: BuiltTimeDom.SVGFESpecularLightingElement, children?: (SVGElement | string)[]): SvgTypesMap['feSpecularLighting'] => ss('feSpecularLighting', props, children)\n    export const feSpotLight = (props?: BuiltTimeDom.SVGFESpotLightElement, children?: (SVGElement | string)[]): SvgTypesMap['feSpotLight'] => ss('feSpotLight', props, children)\n    export const feTile = (props?: BuiltTimeDom.SVGFETileElement, children?: (SVGElement | string)[]): SvgTypesMap['feTile'] => ss('feTile', props, children)\n    export const feTurbulence = (props?: BuiltTimeDom.SVGFETurbulenceElement, children?: (SVGElement | string)[]): SvgTypesMap['feTurbulence'] => ss('feTurbulence', props, children)\n    export const filter = (props?: BuiltTimeDom.SVGFilterElement, children?: (SVGElement | string)[]): SvgTypesMap['filter'] => ss('filter', props, children)\n    export const foreignObject = (props?: BuiltTimeDom.SVGForeignObjectElement, children?: (Element | string)[]): SvgTypesMap['foreignObject'] => ss('foreignObject', props, children)\n    export const g = (props?: BuiltTimeDom.SVGGElement, children?: (SVGElement | string)[]): SvgTypesMap['g'] => ss('g', props, children)\n    export const gradient = (props?: BuiltTimeDom.SVGGradientElement, children?: (SVGElement | string)[]): SvgTypesMap['gradient'] => ss('gradient', props, children)\n    export const image = (props?: BuiltTimeDom.SVGImageElement, children?: (SVGElement | string)[]): SvgTypesMap['image'] => ss('image', props, children)\n    export const line = (props?: BuiltTimeDom.SVGLineElement, children?: (SVGElement | string)[]): SvgTypesMap['line'] => ss('line', props, children)\n    export const linearGradient = (props?: BuiltTimeDom.SVGLinearGradientElement, children?: (SVGElement | string)[]): SvgTypesMap['linearGradient'] => ss('linearGradient', props, children)\n    export const marker = (props?: BuiltTimeDom.SVGMarkerElement, children?: (SVGElement | string)[]): SvgTypesMap['marker'] => ss('marker', props, children)\n    export const mask = (props?: BuiltTimeDom.SVGMaskElement, children?: (SVGElement | string)[]): SvgTypesMap['mask'] => ss('mask', props, children)\n    export const metadata = (props?: BuiltTimeDom.SVGMetadataElement, children?: (SVGElement | string)[]): SvgTypesMap['metadata'] => ss('metadata', props, children)\n    export const path = (props?: BuiltTimeDom.SVGPathElement, children?: (SVGElement | string)[]): SvgTypesMap['path'] => ss('path', props, children)\n    export const pattern = (props?: BuiltTimeDom.SVGPatternElement, children?: (SVGElement | string)[]): SvgTypesMap['pattern'] => ss('pattern', props, children)\n    export const polygon = (props?: BuiltTimeDom.SVGPolygonElement, children?: (SVGElement | string)[]): SvgTypesMap['polygon'] => ss('polygon', props, children)\n    export const polyline = (props?: BuiltTimeDom.SVGPolylineElement, children?: (SVGElement | string)[]): SvgTypesMap['polyline'] => ss('polyline', props, children)\n    export const radialGradient = (props?: BuiltTimeDom.SVGRadialGradientElement, children?: (SVGElement | string)[]): SvgTypesMap['radialGradient'] => ss('radialGradient', props, children)\n    export const rect = (props?: BuiltTimeDom.SVGRectElement, children?: (SVGElement | string)[]): SvgTypesMap['rect'] => ss('rect', props, children)\n    export const script = (props?: BuiltTimeDom.SVGScriptElement, children?: (SVGElement | string)[]): SvgTypesMap['script'] => ss('script', props, children)\n    export const stop = (props?: BuiltTimeDom.SVGStopElement, children?: (SVGElement | string)[]): SvgTypesMap['stop'] => ss('stop', props, children)\n    export const style = (props?: BuiltTimeDom.SVGStyleElement, children?: (SVGElement | string)[]): SvgTypesMap['style'] => ss('style', props, children)\n    export const svg = (props?: BuiltTimeDom.SVGSVGElement, children?: (SVGElement | string)[]): SvgTypesMap['svg'] => ss('svg', props, children)\n    export const switch_ = (props?: BuiltTimeDom.SVGSwitchElement, children?: (SVGElement | string)[]): SvgTypesMap['switch'] => ss('switch', props, children)\n    export const symbol = (props?: BuiltTimeDom.SVGSymbolElement, children?: (SVGElement | string)[]): SvgTypesMap['symbol'] => ss('symbol', props, children)\n    export const text = (props?: BuiltTimeDom.SVGTextElement, children?: (SVGElement | string)[]): SvgTypesMap['text'] => ss('text', props, children)\n    export const textPath = (props?: BuiltTimeDom.SVGTextPathElement, children?: (SVGElement | string)[]): SvgTypesMap['textPath'] => ss('textPath', props, children)\n    export const title = (props?: BuiltTimeDom.SVGTitleElement, children?: (SVGElement | string)[]): SvgTypesMap['title'] => ss('title', props, children)\n    export const tspan = (props?: BuiltTimeDom.SVGTSpanElement, children?: (SVGElement | string)[]): SvgTypesMap['tspan'] => ss('tspan', props, children)\n    export const use = (props?: BuiltTimeDom.SVGUseElement, children?: (SVGElement | string)[]): SvgTypesMap['use'] => ss('use', props, children)\n    export const view = (props?: BuiltTimeDom.SVGViewElement, children?: (SVGElement | string)[]): SvgTypesMap['view'] => ss('view', props, children)\n}\n\n/// Script-generated.\n\n/**\n * Nice-to-remember aliases for all SVG element interfaces.\n */\nexport namespace s {\n    export type A = SVGAElement\n    export type Circle = SVGCircleElement\n    export type ClipPath = SVGClipPathElement\n    export type Defs = SVGDefsElement\n    export type Desc = SVGDescElement\n    export type Ellipse = SVGEllipseElement\n    export type FeBlend = SVGFEBlendElement\n    export type FeColorMatrix = SVGFEColorMatrixElement\n    export type FeComponentTransfer = SVGFEComponentTransferElement\n    export type FeComposite = SVGFECompositeElement\n    export type FeConvolveMatrix = SVGFEConvolveMatrixElement\n    export type FeDiffuseLighting = SVGFEDiffuseLightingElement\n    export type FeDisplacementMap = SVGFEDisplacementMapElement\n    export type FeDistantLight = SVGFEDistantLightElement\n    export type FeFlood = SVGFEFloodElement\n    export type FeFuncA = SVGFEFuncAElement\n    export type FeFuncB = SVGFEFuncBElement\n    export type FeFuncG = SVGFEFuncGElement\n    export type FeFuncR = SVGFEFuncRElement\n    export type FeGaussianBlur = SVGFEGaussianBlurElement\n    export type FeImage = SVGFEImageElement\n    export type FeMerge = SVGFEMergeElement\n    export type FeMergeNode = SVGFEMergeNodeElement\n    export type FeMorphology = SVGFEMorphologyElement\n    export type FeOffset = SVGFEOffsetElement\n    export type FePointLight = SVGFEPointLightElement\n    export type FeSpecularLighting = SVGFESpecularLightingElement\n    export type FeSpotLight = SVGFESpotLightElement\n    export type FeTile = SVGFETileElement\n    export type FeTurbulence = SVGFETurbulenceElement\n    export type Filter = SVGFilterElement\n    export type ForeignObject = SVGForeignObjectElement\n    export type G = SVGGElement\n    export type Gradient = SVGGradientElement\n    export type Image = SVGImageElement\n    export type Line = SVGLineElement\n    export type LinearGradient = SVGLinearGradientElement\n    export type Marker = SVGMarkerElement\n    export type Mask = SVGMaskElement\n    export type Metadata = SVGMetadataElement\n    export type Path = SVGPathElement\n    export type Pattern = SVGPatternElement\n    export type Polygon = SVGPolygonElement\n    export type Polyline = SVGPolylineElement\n    export type RadialGradient = SVGRadialGradientElement\n    export type Rect = SVGRectElement\n    export type Script = SVGScriptElement\n    export type Stop = SVGStopElement\n    export type Style = SVGStyleElement\n    export type Svg = SVGSVGElement\n    export type Switch = SVGSwitchElement\n    export type Symbol = SVGSymbolElement\n    export type Text = SVGTextElement\n    export type TextPath = SVGTextPathElement\n    export type Title = SVGTitleElement\n    export type Tspan = SVGTSpanElement\n    export type Use = SVGUseElement\n    export type View = SVGViewElement\n}\n","export {h} from './html/h'\nexport {s} from './svg/s'\n","export function clone<T>(obj: T): T\nexport function clone<T>(arr: T[]): T[]\nexport function clone(obj: any): any {\n    if (Array.isArray(obj)) {\n        return obj.map(item => Object.assign({}, item))\n    } else {\n        return Object.assign({}, obj)\n    }\n}\n","import {clone} from './clone'\n\ninterface GetOptions {\n    cache?: boolean\n}\n\nconst cache: {[url: string]: any} = {}\n\nexport function get(url: string, options: GetOptions = {}) {\n    if (options.cache && cache.hasOwnProperty(url)) {\n        return Promise.resolve(clone(cache[url]))\n    }\n\n    return fetch(url)\n        .then(res => res.json())\n        .then(json => {\n            if (options.cache) {\n                cache[url] = clone(json)\n            }\n            return json\n        })\n}\n","import './header.scss';\n\nimport {h} from '@soil/dom'\n\nexport function header() {\n    return h.nav({className: 'header'}, [\n        h.h1({}, [\n            h.a({href: '/'}, ['Kiwibit'])\n        ]),\n        h.ul({}, [\n            h.li({}, [\n                h.a({href: 'food-details.html'}, ['Food details'])\n            ]),\n            h.li({}, [\n                h.a({href: 'top-foods.html'}, ['Top foods'])\n            ]),\n            h.li({}, [\n                h.a({href: 'label-builder.html'}, ['Label builder'])\n            ])\n        ])\n    ])\n}\n","import './label-builder.scss'\n\nimport {h} from '@soil/dom'\nimport {get} from './common/get'\nimport {header} from './common/header'\nimport {BasicFood} from './common/model'\n\nconst selectedFoods: BasicFood[] = []\n\nconst foodSelectPlaceholderOption = h.option({disabled: true}, ['Results will appear here (up to 100)'])\n\nconst foodSelect = h.select({multiple: true}, [\n    foodSelectPlaceholderOption\n])\n\nconst foodSelector = h.div({className: 'food-selector'}, [\n    h.div({className: 'top-controls'}, [\n        h.input({\n            type: 'search',\n            placeholder: 'Find foods (at least 3 characters)',\n            oninput: evt => {\n                const text = (evt.target as h.Input).value\n                if (text.length <= 2) {\n                    foodSelect.innerHTML = ''\n                    foodSelect.appendChild(foodSelectPlaceholderOption)\n                    return\n                }\n\n                get('/find-foods/' + text, {cache: true})\n                    .then((foods: BasicFood[]) => {\n                        foodSelect.innerHTML = ''\n                        foods\n                            .map(f => h.option({value: f.ndb_no}, [f.long_desc]))\n                            .forEach(opt => foodSelect.appendChild(opt))\n                    })\n            }\n        }),\n        h.button({\n            onclick: () => {\n                Array\n                    .from(foodSelect.options)\n                    .filter(opt => opt.selected)\n                    .forEach(opt => {\n                        for (let i = 0; i < selectedFoods.length; ++i) {\n                            if (selectedFoods[i].ndb_no === opt.value) {\n                                return;\n                            }\n                        }\n\n                        selectedFoods.push({\n                            ndb_no: opt.value,\n                            long_desc: opt.textContent!\n                        })\n                        selectedFoodList.appendChild(h.li({}, [opt.textContent!]))\n                    })\n            }\n        }, ['Add']),\n    ]),\n    foodSelect\n])\n\nconst selectedFoodList = h.ul()\n\ndocument.body.appendChild(header())\ndocument.body.appendChild(h.div({className: 'container padded'}, [\n    foodSelector,\n    selectedFoodList\n]))\n"]}